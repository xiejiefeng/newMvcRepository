<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
  	
  	<!-- 加载配置文件 -->
	<context:component-scan base-package="com.xjf.wemall" />
  	
	<!-- 缓存Redis -->
	<import resource="classpath:conf/applicationContext-redis-config.xml"/>
	<!-- 接口适配器 -->
	<import resource="classpath:conf/applicationContext-adapter.xml"/>
	<!-- dal -->
	<!-- <import resource="classpath:conf/applicationContext-dal.xml"/> -->
	
  	<!-- i18n -->
    <bean id="messageSource"
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:message/messages</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8" />
        <property name="fallbackToSystemLocale" value="true" />
        <property name="useCodeAsDefaultMessage" value="false" />
    </bean>
    
    <!-- <bean class="com.saic.wemall.api.exception.WemallBaseException">
    	<property name="messageSource" ref="messageSource" />
    </bean> -->
  	
	<!-- 时间记录拦截器 -->
	<bean id="logTimeInterceptor" class="com.xjf.wemall.interceptor.LogTimeInterceptor" />
	<!-- 入出参记录拦截器 -->
	<bean id="logInOutInterceptor" class="com.xjf.wemall.interceptor.LogInOutInterceptor" />
	
	<!-- 定义bean自动代理容器 -->
	<!-- *****AutoProxyCreator与AopConfig同时使用，会产生二次代理，而多个AopConfig则永远只有一个代理，故推荐使用AopConfig***** -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
    	<property name="interceptorNames" >
    		<list>
    			配置拦截器 
    			日志拦截器
     		    <value>logTimeInterceptor</value>
    		</list>
    	</property>
    	<property name="beanNames">
    		<list>
    			需要拦截serivce的beanName,支持通配
    			<value>*Service</value>
    			<value>*ServiceImpl</value>
    		</list>
    	</property>
    	根据Target类型动态使用代理技术(proxy与cglib)
    	<property name="proxyTargetClass" value="true"/>
    	暴露代理对象，可以使用AopContext
    	<property name="exposeProxy" value="true"/>
	</bean> -->
	
	<!-- 根据自定义标签类，匹配代理方法 -->
	<aop:config proxy-target-class="true">
		<!-- <aop:pointcut id="transactionPointcut" expression="execution(* com.xjf.wemall.service..*Service*.*(..))"/> -->
		<aop:pointcut id="logInOutPointcut" expression="execution(@com.xjf.wemall.annotation.LogInOut * *(..)) || execution(* (@com.xjf.wemall.annotation.LogInOut *).*(..))"/>
		<aop:pointcut id="logTimePointcut" expression="execution(@com.xjf.wemall.annotation.LogTime * *(..)) || execution(* (@com.xjf.wemall.annotation.LogTime *).*(..))"/>
		
		<aop:advisor advice-ref="logTimeInterceptor" pointcut-ref="logTimePointcut" order="1"/>
		<aop:advisor advice-ref="logInOutInterceptor" pointcut-ref="logInOutPointcut" order="4"/>
		<!-- <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="transactionPointcut" order="2"/> -->
	</aop:config>
	
	<!-- 指定需代理的类和方法
	<aop:config proxy-target-class="true">
		<aop:pointcut id="demoPointcut" expression="execution(* com.saic.wemall.service.redis.api.RedisResetService.reset*(..))"/>
		<aop:advisor advice-ref="demoInterceptor" pointcut-ref="demoPointcut"/>
	</aop:config> -->
</beans>