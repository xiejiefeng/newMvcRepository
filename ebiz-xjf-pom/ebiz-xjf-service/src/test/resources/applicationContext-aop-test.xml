<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	
	<!-- 加载配置文件 -->
	<context:component-scan base-package="com.xjf.wemall.AOPService" />
    <!-- AOP切面 -->
    <!-- helloWorld
    <bean id="helloWorldService"  class="com.xjf.wemall.AOPService.helloWorld.Impl.HelloWorldService"/>  -->
    <bean id="aspect" class="com.xjf.wemall.AOPService.helloWorld.aspectj.HelloWorldAspect"/>
	<aop:config>
		<!-- ________________________________________我是一条分割线________________________________________ -->
       	<!-- 
       	Advisor表示只有一个通知和一个切入点的切面，由于Spring AOP都是基于AOP联盟的拦截器模型的环绕通知的，所以引入Advisor来支持各种通知类型（如前置通知等5种），
       	Advisor概念来自于Spring1.2对AOP的支持，在AspectJ中没有相应的概念对应。
		Advisor可以使用<aop:config>标签下的<aop:advisor>标签定义：
		<aop:advisor pointcut="切入点表达式" pointcut-ref="切入点Bean引用"  
                     advice-ref="通知API实现引用"/>  
		pointcut和pointcut-ref：二者选一，指定切入点表达式；
       	advice-ref：引用通知API实现Bean，如前置通知接口为MethodBeforeAdvice；
		
		 -->
       	<aop:advisor pointcut="execution(* com.xjf..*.sayAdvisorBefore(..))"  
                     advice-ref="beforeAdvice"/>
		<aop:aspect ref="aspect">
		<!-- sayHello -->
		<!-- 
		<aop:pointcut id="pointcut" expression="execution(* com.xjf..*.*(..))"/>
    	<aop:aspect id="aspect" ref="aspect">
    		<aop:before pointcut-ref="pointcut" method="beforeAdvice" />
        	<aop:before pointcut-ref="pointcut" method="beforeAdvice"/>
	        <aop:after pointcut="execution(* com.xjf..*.*(..))" method="afterFinallyAdvice"/>
	    </aop:aspect> -->
	    <!-- __________________________我是一条分割线__________________________ -->
	    <!-- <aop:before pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"  
				method="前置通知实现方法名" arg-names="前置通知实现方法参数列表参数名字"/>   
				
				pointcut和pointcut-ref：二者选一，指定切入点；
         		method：指定前置通知实现方法名，如果是多态需要加上参数类型，多个用“，”隔开，如beforeAdvice(java.lang.String)；
         		arg-names：指定通知实现方法的参数名字，多个用“，”分隔，可选，类似于【3.1.2 构造器注入】中的参数名注入限制：
         			在class文件中没生成变量调试信息是获取不到方法参数名字的，
         			因此只有在类没生成变量调试信息时才需要使用arg-names属性来指定参数名，
         			如arg-names="param"表示通知实现方法的参数列表的第一个参数名字为“param”。
         			
			分析一下吧：
			1）切入点匹配：在配置中使用“execution(* cn.javass..*.sayBefore(..)) ”匹配目标方法sayBefore，
			且使用“args(param)”匹配目标方法只有一个参数且传入的参数类型为通知实现方法中同名的参数类型；
			2）目标方法定义：使用method=" beforeAdvice(java.lang.String) "指定前置通知实现方法，
			且该通知有一个参数类型为java.lang.String参数；
			3）目标方法参数命名：其中使用arg-names=" param "指定通知实现方法参数名为“param”，
			切入点中使用“args(param)”匹配的目标方法参数将自动传递给通知实现方法同名参数。
			
			第一个before：before advice
			第二个before advice param:TParam1 TParam2
			第三个before advice param:TParam2 TParam1
		
		<aop:aspect ref="aspect">  
	        <aop:before pointcut="execution(* com.xjf..*.sayBefore(..)) and args(java.lang.String,java.lang.String)"   
	                           method="beforeAdvice"/>
            <aop:before pointcut="execution(* com.xjf..*.sayBefore(..)) and args(tt1,tt2)"   
            method="beforeAdvice(java.lang.String,java.lang.String)" arg-names="tt1,tt2"/>
            
            <aop:before pointcut="execution(* com.xjf..*.sayBefore(..)) and args(tt1,tt2)"   
            method="beforeAdvice(java.lang.String,java.lang.String)" arg-names="tt2,tt1"/> 
    	</aop:aspect>-->
	    
	    <!-- ________________________________________我是一条分割线________________________________________ -->
	    
	    <!-- <aop:after-returning pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"  
    			method="后置返回通知实现方法名" arg-names="后置返回通知实现方法参数列表参数名字" returning="返回值对应的后置返回通知实现方法参数名" />
    			
    			pointcut和pointcut-ref：同前置通知同义；
         		method：同前置通知同义；
         		arg-names：同前置通知同义；
         		returning：定义一个名字，该名字用于匹配通知实现方法的一个参数名，当目标方法执行正常返回后，将把目标方法返回值传给通知方法；
         					returning限定了只有目标方法返回值匹配与通知方法相应参数类型时才能执行后置返回通知，否则不执行，
         					对于returning对应的通知方法参数为Object类型将匹配任何目标返回值。
            
				分析一下吧：
			1）切入点匹配：在配置中使用“execution(* cn.javass..*.sayAfterReturning(..)) ”匹配目标方法sayAfterReturning，该方法返回true；
			2）目标方法定义：使用method="afterReturningAdvice"指定后置返回通知实现方法；
			3）目标方法参数命名：其中使用arg-names="retVal"指定通知实现方法参数名为“retVal”；
			4）返回值命名：returning="retVal"用于将目标返回值赋值给通知实现方法参数名为“retVal”的参数上。
		<aop:aspect ref="aspect">  
		    <aop:after-returning pointcut="execution(* com.xjf..*.sayAfterReturning(..))"  
	                                method="afterReturningAdvice"  
	                               arg-names="retVal2"    
	                               returning="retVal2"/> 
	    </aop:aspect>-->
	    
	    <!-- ________________________________________我是一条分割线________________________________________ -->
	    <!-- <aop:after-throwing pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"  
                                method="后置异常通知实现方法名"  
                                arg-names="后置异常通知实现方法参数列表参数名字"  
                                throwing="将抛出的异常赋值给的通知实现方法参数名"/>  
			pointcut和pointcut-ref：同前置通知同义；
         	method：同前置通知同义；
         	arg-names：同前置通知同义；
         	throwing：定义一个名字，该名字用于匹配通知实现方法的一个参数名，当目标方法抛出异常返回后，将把目标方法抛出的异常传给通知方法；
         			throwing限定了只有目标方法抛出的异常匹配与通知方法相应参数异常类型时才能执行后置异常通知，否则不执行，
         			对于throwing对应的通知方法参数为Throwable类型将匹配任何异常。
			 分析一下吧：
			1）切入点匹配：在配置中使用“execution(* cn.javass..*.sayAfterThrowing(..))”匹配目标方法sayAfterThrowing，该方法将抛出RuntimeException异常；
			2）目标方法定义：使用method="afterThrowingAdvice"指定后置异常通知实现方法；
			3）目标方法参数命名：其中使用arg-names="exception"指定通知实现方法参数名为“exception”；
			4）异常命名：returning="exception"用于将目标方法抛出的异常赋值给通知实现方法参数名为“exception”的参数上。
		 
	    <aop:aspect ref="aspect">  
	    <aop:after-throwing pointcut="execution(* com.xjf..*.sayAfterThrowing(..))"  
                                method="afterThrowingAdvice"  
                                arg-names="exception22"  
                                throwing="exception22"/>
        </aop:aspect>-->
        
        <!-- ________________________________________我是一条分割线________________________________________ -->
        <!-- <aop:after pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"  
                  method="后置最终通知实现方法名"  
                  arg-names="后置最终通知实现方法参数列表参数名字"/>
         pointcut和pointcut-ref：同前置通知同义；
         method：同前置通知同义；
         arg-names：同前置通知同义；      
       	
       	<aop:aspect ref="aspect"> 
	        <aop:after pointcut="execution(* com.xjf..*.sayAfterFinally(..))"  
	         method="afterFinallyAdvice"/>
        </aop:aspect>  -->
        <!-- ________________________________________我是一条分割线________________________________________ -->
        <!-- 环绕通知 -->
        <!-- <aop:around pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"  
                     method="后置最终通知实现方法名"  
                     arg-names="后置最终通知实现方法参数列表参数名字"/>
        	环绕通知第一个参数必须是org.aspectj.lang.ProceedingJoinPoint类型，
        	在通知实现方法内部使用ProceedingJoinPoint的proceed()方法使目标方法执行，
        	proceed 方法可以传入可选的Object[]数组，该数组的值将被作为目标方法执行时的参数。
       	 
        <aop:around pointcut="execution(* com.xjf..*.sayAround(..))"  
           method="aroundAdvice"/>-->
           
        <!-- ________________________________________我是一条分割线________________________________________ -->
        <!-- <aop:declare-parents types-matching="AspectJ语法类型表达式" implement-interface=引入的接口" 
        		default-impl="引入接口的默认实现" delegate-ref="引入接口的默认实现Bean引用"/>
        	types-matching：匹配需要引入接口的目标对象的AspectJ语法类型表达式；
         	implement-interface：定义需要引入的接口；
         	default-impl和delegate-ref：定义引入接口的默认实现，二者选一，default-impl是接口的默认实现类全限定名，而delegate-ref是默认的实现的委托Bean名；
         	分析一下吧：
1）目标对象类型匹配：使用types-matching="cn.javass..*.IHelloWorldService+"匹配IHelloWorldService接口的子类型，如HelloWorldService实现；
2）引入接口定义：通过implement-interface属性表示引入的接口，如“cn.javass.spring.chapter6.service.IIntroductionService”。
3）引入接口的实现：通过default-impl属性指定，如“cn.javass.spring.chapter6.service.impl.IntroductiondService”，
	也可以使用“delegate-ref”来指定实现的Bean。
4）获取引入接口：如使用“ctx.getBean("helloWorldService", IIntroductionService.class);”可直接获取到引入的接口。

分析一下吧：
1）目标对象类型匹配：使用types-matching="cn.javass..*.IHelloWorldService+"匹配IHelloWorldService接口的子类型，如HelloWorldService实现；
2）引入接口定义：通过implement-interface属性表示引入的接口，如“cn.javass.spring.chapter6.service.IIntroductionService”。
3）引入接口的实现：通过default-impl属性指定，如“cn.javass.spring.chapter6.service.impl.IntroductiondService”，也可以使用“delegate-ref”来指定实现的Bean。
4）获取引入接口：如使用“ctx.getBean("helloWorldService", IIntroductionService.class);”可直接获取到引入的接口。
           
           <aop:declare-parents types-matching="com.xjf..*.IHelloWorldService+"  
    		implement-interface="com.xjf.wemall.AOPService.helloWorld.API.IIntroductionService"                           
    		default-impl="com.xjf.wemall.AOPService.helloWorld.Impl.IntroductiondService"/>  -->
       </aop:aspect>
       
	</aop:config>
	
	<bean id="beforeAdvice" class="com.xjf.wemall.AOPService.helloWorld.aspectj.BeforeAdviceImpl"/>
	
	<!-- 启用对@AspectJ的支持 -->
	<aop:aspectj-autoproxy/>
</beans>
